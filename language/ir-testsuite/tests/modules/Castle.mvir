module Math {
    public pow(x: u64, n: u64) : u64 {
        if (copy(n) == 0) {
            return 1;
        }
        if (copy(n) == 1) {
            return move(x);
        }
        if (copy(n) % 2 == 0) {
            return Self.pow(copy(x) * copy(x), copy(n) / 2);
        } else {
            return Self.pow(copy(x) * copy(x), copy(n) / 2) * copy(x);
        }
    }
    public myrand(seed: u64) : u64 {
        let rand: u64;
        rand = move(seed) * 1103515245 + 12345;
        return (move(rand) / 65536) % 32768;
    }
}
module BuildCastle {
    import Transaction.Math;
    import 0x0.Block;
    resource Castle {
        name: bytearray, 
        SerialNum: u64,
        level: u64,
        economic: u64,
        military: u64
    }
   resource CastleSum {
        sum: u64
    }
    public generateSerial(SerialLimit: u64) : u64 {
        let SerialNum: u64;
        SerialNum = Math.myrand(Block.get_current_height()) % (copy(SerialLimit) - copy(SerialLimit) / 10) + copy(SerialLimit) / 10;
        return move(SerialNum);
    }
    public racial_judgment(SerialNum: u64) : u64 * u64 {
        let race: u64;
        race = ((move(SerialNum) / 10) % 10) % 5;
        if (copy(race) == 0) {
            return 6, 6;
        }
        if (copy(race) == 1) {
            return 8, 3;
        }
        if (copy(race) == 2) {
            return 3, 8;
        }
        if (copy(race) == 3) {
            return 7, 4;
        } else {
            return 4, 7;
        }
    }
    public newCastle(_name: bytearray, _SerialNum: u64) : Self.Castle acquires CastleSum{
        let a: u64;
        let b: u64;
        let sum_ref: &mut Self.CastleSum;
        let sum_ref_value: u64;
        a, b = Self.racial_judgment(copy(_SerialNum));
        sum_ref = borrow_global_mut<CastleSum>(0x0000000);
        sum_ref_value = *&copy(sum_ref).sum;
        *(&mut move(sum_ref).sum) = move(sum_ref_value) + 1;
        return Castle {
            name: move(_name),
            SerialNum: copy(_SerialNum),
            level: 1,
            economic: move(a),
            military: move(b)
        };
    }
    public desCastle (castle: Self.Castle)
    {
        let name: bytearray;
        let SerialNum: u64;
        let level: u64;
        let economic: u64;
        let military: u64;
        Castle{name,SerialNum,level,economic,military} = move(castle);
        return;
    }
    public iniCastleSum()
    {
        assert(get_txn_sender() == 0x0000000, 1);
        move_to_sender<CastleSum>(CastleSum { sum: 0 });
        return;
    }
    public castlesum(): u64 acquires CastleSum
    {
        let CastleSum_ref: &mut Self.CastleSum;
        CastleSum_ref = borrow_global_mut<CastleSum>(0x0000000);
        return *&move(CastleSum_ref).sum;
    }
    public upgrade(ref: &mut Self.Castle)
    {
        let x: u64;
        let rand: u64;
        let r: u64;
        let u: u64;
        x = *&copy(ref).economic;
        if (copy(rand)<=15)
        {
            if(copy(rand)<=8)
            {
                if(copy(rand)<=2)
                {
                    *(&mut copy(ref).economic) = copy(x) + move(x)*40/100;
                }
                else
                {
                    *(&mut copy(ref).economic) = copy(x) + move(x)*20/100;
                }
            }
            else
            {
                *(&mut copy(ref).economic) = copy(x) + move(x)*10/100;
            }
            
        }
        else
        {
            *(&mut copy(ref).economic) = copy(x) + move(x)*5/100;
        }
        r = *&copy(ref).level;
        u = 10 * copy(r) + Math.pow (2, copy(r));
        if ( *(&mut copy(ref).economic) > move(u))
        {
            *(&mut move(ref).level) = move(r) + 1;
        }
        else
        {
            *(&mut move(ref).level) = move(r);
        }
        return;
    }
}
module CastleAccount {
    import Transaction.BuildCastle;
    import Transaction.Math;
    import 0x0.Event;
    import 0x0.Block;
    resource CastleAccount {
        new_castle: BuildCastle.Castle,
        height: u64,
        account_events: Event.Handle<Self.AccountEvent>
    }
    struct AccountEvent {
        flag: u64 
    }
    public newAccount (name:bytearray) : Self.CastleAccount
    {
        let SerialDigits: u64;
        let SerialLimit: u64;
        let SerialNum: u64;
        let height: u64;
        let castle: BuildCastle.Castle;        
        let event_handle: Event.Handle<Self.AccountEvent>;
        event_handle = Event.new_event_handle<Self.AccountEvent>();
        SerialDigits = 8;
        SerialLimit = Math.pow(10, copy(SerialDigits));
        SerialNum = BuildCastle.generateSerial(copy(SerialLimit));
        castle = BuildCastle.newCastle(move(name), move(SerialNum));
        height = Block.get_current_height();
        return CastleAccount { new_castle: move(castle), height: move(height), account_events: move(event_handle)};
    }
    public publishAccount (account: Self.CastleAccount) acquires CastleAccount
    {
        let account_event: Self.AccountEvent;
        let account_add: address;
        let account_ref: &mut Self.CastleAccount;        
        account_add = get_txn_sender();
        account_ref = borrow_global_mut<CastleAccount>(copy(account_add));
        account_event = AccountEvent { flag: 1 };
        Event.emit_event<Self.AccountEvent>(&mut move(account_ref).account_events, move(account_event));
        move_to_sender<CastleAccount>(move(account));
        return;
    }
    public annexation () acquires CastleAccount
    {
        let add: address;
        let ref: &mut Self.CastleAccount;
        let t: &mut BuildCastle.Castle;
        let h1: u64;
        let h2: u64;
        add = get_txn_sender();
        ref = borrow_global_mut<CastleAccount>(move(add));
        t = &mut copy(ref).new_castle;
        h1 = *&copy(ref).height;
        h2 = Block.get_current_height();
        if (copy(h2)-copy(h1) >= 100)
        {
            BuildCastle.upgrade(move(t));
            *(&mut move(ref).height) = move(h2);
        }
        else
        {
            _ = move(t);
            *(&mut move(ref).height) = move(h1);
        }
        return;
    }
}


import Transaction.CastleAccount;
main(name: bytearray) {
    let account: CastleAccount.CastleAccount;
    account = CastleAccount.newAccount(move(name));
    CastleAccount.publishAccount(move(account));
    return;
}